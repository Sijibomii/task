application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
server.port=8081

#kafka
# Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Applies to all components unless overridden.
spring.kafka.bootstrap-servers=127.0.0.1:29092

# When greater than zero, enables retrying of failed sends.
spring.kafka.producer.retries=0

# Default batch size. A small batch size will make batching less common and may reduce throughput (a batch size of zero disables batching entirely).
# batch.size measures batch size in total bytes instead of the number of messages. It controls how many bytes of data to collect before sending messages 
# to the Kafka broker. Set this as high as possible, without exceeding available memory. The default value is 16384.
# When you use Producer.send(), you fill up buffers on the producer. When a buffer is full, the producer sends the buffer 
# to the Kafka broker and begins to refill the buffer.
spring.kafka.producer.batch-size=256

# the number of milliseconds a producer is willing to wait before sending a batch out. The default value is 0, which means "send the messages right away"
spring.kafka.producer.properties.linger.ms=1

# Total memory size the producer can use to buffer records waiting to be sent to the server.
spring.kafka.producer.buffer-memory=1048576

# Whether the consumer's offset is periodically committed in the background.
# Using auto-commit gives you “at least once” delivery: Kafka guarantees that no messages will be missed, 
# but duplicates are possible. Auto-commit basically works as a cron with a period set through the
spring.kafka.consumer.enable-auto-commit=false

# The timeout used to detect client failures when using Kafka’s group management facility. The client sends periodic heartbeats to indicate its liveness to the broker. 
# If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this client from the group and initiate a rebalance. 
spring.kafka.consumer.properties.session.timeout.ms=15000

# The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to
spring.kafka.consumer.auto.commit.interval.ms=100

spring.kafka.consumer.auto-offset-reset=earliest

# Unique string that identifies the consumer group to which this consumer belongs.
spring.kafka.consumer.group-id=default-group


spring.kafka.consumer.properties.concurrency=9
spring.kafka.consumer.max-poll-records=50
spring.devtools.restart.enabled=true
